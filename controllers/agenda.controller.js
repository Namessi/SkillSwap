// controllers/agenda.controller.js

const Agenda = require('../models/agenda.model');

/**
 * ‚ûï Cr√©er un √©v√©nement dans l‚Äôagenda de l‚Äôutilisateur connect√©
 * @route POST /api/agenda
 * @access Priv√© (utilisateur connect√©)
 */
exports.creerEvenement = (req, res) => {
  const utilisateur_id = req.user.id;
  const { titre, description, date, heure_debut, heure_fin } = req.body;

  // V√©rification des champs requis
  if (!titre || !date || !heure_debut || !heure_fin) {
    return res.status(400).json({ message: 'Champs requis manquants' });
  }

  // Enregistrement de l‚Äô√©v√©nement
  Agenda.creerEvenement({ utilisateur_id, titre, description, date, heure_debut, heure_fin }, (err, result) => {
    if (err) return res.status(500).json({ message: 'Erreur lors de la cr√©ation de l‚Äô√©v√©nement' });

    res.status(201).json({
      message: '√âv√©nement cr√©√© avec succ√®s',
      id: result.insertId
    });
  });
};

/**
 * üìÖ R√©cup√©rer tous les √©v√©nements de l‚Äôagenda de l‚Äôutilisateur connect√©
 * @route GET /api/agenda
 * @access Priv√© (utilisateur connect√©)
 */
exports.getEvenementsUtilisateur = (req, res) => {
  const utilisateur_id = req.user.id;

  Agenda.getEvenementsUtilisateur(utilisateur_id, (err, result) => {
    if (err) return res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration' });

    res.status(200).json(result);
  });
};

/**
 * ‚ùå Supprimer un √©v√©nement sp√©cifique (si propri√©taire)
 * @route DELETE /api/agenda/:id
 * @access Priv√© (utilisateur connect√©)
 */
exports.supprimerEvenement = (req, res) => {
  const utilisateur_id = req.user.id;
  const { id } = req.params;

  Agenda.supprimerEvenement(id, utilisateur_id, (err, affectedRows) => {
    if (err) return res.status(500).json({ message: 'Erreur lors de la suppression' });

    if (affectedRows === 0) {
      return res.status(404).json({ message: '√âv√©nement introuvable ou non autoris√©' });
    }

    res.status(200).json({ message: '√âv√©nement supprim√© avec succ√®s' });
  });
};
